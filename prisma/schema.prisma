datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String  @id @unique
  firstName       String
  lastName        String
  avatarUrl       String?
  email           String? @unique
  isEmailVerified Boolean @default(false)

  auth_session        Session[]
  key                 Key[]
  memberships         WorkspaceMember[]
  ideasCollaboratedOn IdeaSpark[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String

  user User @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Workspace {
  id            String @id @default(cuid())
  name          String
  roles         Json?
  flowTemplates Json?

  members WorkspaceMember[]
  invites WorkspaceInvite[]
  ideas   IdeaSpark[]
  flows   Flow[]
}

model WorkspaceMember {
  id          String   @id @unique
  workspaceId String
  userId      String
  isAdmin     Boolean  @default(false)
  createdAt   DateTime @default(now())

  user          User             @relation(fields: [userId], references: [id])
  workspace     Workspace        @relation(fields: [workspaceId], references: [id])
  assignedTasks TaskAssignment[]

  @@index([userId])
  @@index([workspaceId])
}

model WorkspaceInvite {
  workspaceId      String
  email            String
  confirmationCode String
  createdAt        DateTime  @default(now())
  claimedAt        DateTime?
  sentById         String

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@id([workspaceId, email])
  @@index([sentById])
  @@index([workspaceId])
}

model IdeaSpark {
  id          String    @id @default(cuid())
  title       String
  body        String    @db.Text()
  isHot       Boolean   @default(false)
  isEvergreen Boolean   @default(false)
  isPublished Boolean
  expiresOn   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  workspaceId String

  collaborators User[]
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  tags          Tag[]
  flows         Flow[]

  @@index([workspaceId])
}

model Tag {
  label String @id @db.VarChar(50)

  ideas IdeaSpark[]
}

model Task {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text()
  isStarted   Boolean   @default(false)
  startedOn   DateTime?
  isComplete  Boolean   @default(false)
  completedOn DateTime?
  flowId      String?

  membersAssigned TaskAssignment[]
  flow            Flow?            @relation(fields: [flowId], references: [id])

  @@index([flowId])
}

model TaskAssignment {
  taskId   String
  memberId String

  member WorkspaceMember @relation(fields: [memberId], references: [id])
  Task   Task            @relation(fields: [taskId], references: [id])

  @@id([taskId, memberId])
  @@index([taskId])
  @@index([memberId])
}

model Flow {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text()
  createdAt   DateTime  @default(now())
  targetDate  DateTime?
  workspaceId String
  ideaId      String?

  workspace Workspace  @relation(fields: [workspaceId], references: [id])
  idea      IdeaSpark? @relation(fields: [ideaId], references: [id])
  tasks     Task[]

  @@index([workspaceId])
  @@index([ideaId])
}
